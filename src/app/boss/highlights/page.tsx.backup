'use client'

import { Button, Table, Modal, Form, Input, DatePicker, Upload, message, Image, Row, Col, Switch, Space } from 'antd';
import { useEffect, useState } from 'react';
import { HighlightWithMedia, MediaItem, MediaApiResponse } from './types';
import dayjs from 'dayjs';
import { UploadOutlined, PictureOutlined, PlayCircleOutlined, CloseOutlined, TableOutlined, AppstoreOutlined } from '@ant-design/icons';
import HighlightCardGrid from '@/components/HighlightCardGrid';

const HighlightsPage = () => {
  const [highlights, setHighlights] = useState<HighlightWithMedia[]>([]);
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [editingRecord, setEditingRecord] = useState<HighlightWithMedia | null>(null);
  const [form] = Form.useForm();
  const [media, setMedia] = useState<MediaItem[]>([]);
  const [allMedia, setAllMedia] = useState<MediaItem[]>([]);
  const [isGalleryVisible, setIsGalleryVisible] = useState(false);
  const [galleryHighlightId, setGalleryHighlightId] = useState<string | null>(null);
  const [isCardView, setIsCardView] = useState(false);

  useEffect(() => {
    const fetchData = async () => {
      const [highlightsResponse, mediaResponse] = await Promise.all([
        fetch('/api/highlights'),
        fetch('/api/media')
      ]);
      const highlightsData = await highlightsResponse.json();
      const mediaData = await mediaResponse.json();

      // Filter media for highlights only and map to ensure proper typing
      const highlightMediaData = mediaData
        .filter((item: MediaApiResponse) => item.highlightId)
        .map((item: MediaApiResponse) => ({
          id: item.id,
          url: item.url,
          type: (item.type === 'image' || item.type === 'video') ? item.type : 'image' as 'image' | 'video',
          highlightId: item.highlightId || ''
        }));

      setHighlights(highlightsData);
      setAllMedia(highlightMediaData);
    };

    fetchData();
  }, []);

  const handleAdd = () => {
    setEditingRecord(null);
    setMedia([]);
    form.resetFields();
    setIsModalVisible(true);
  };

  const handleOk = async () => {
    try {
      const values = await form.validateFields();
      const url = editingRecord ? `/api/highlights/${editingRecord.id}` : '/api/highlights';
      const method = editingRecord ? 'PUT' : 'POST';

      const response = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ...values,
          startDate: values.startDate.toISOString(),
        }),
      });

      if (response.ok) {
        const result = await response.json();

        // Save media for this highlight
        if (media.length > 0) {
          await Promise.all(media.map(async (item) => {
            if (!item.id) { // New media
              await fetch('/api/media', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  url: item.url,
                  type: item.type,
                  highlightId: result.id
                })
              });
            }
          }));
        }

        // Refresh data
        const [highlightsResponse, mediaResponse] = await Promise.all([
          fetch('/api/highlights'),
          fetch('/api/media')
        ]);
        const highlightsData = await highlightsResponse.json();
        const mediaData = await mediaResponse.json();

        // Filter and map media data to ensure proper typing
        const highlightMediaData = mediaData
          .filter((item: MediaApiResponse) => item.highlightId)
          .map((item: MediaApiResponse) => ({
            id: item.id,
            url: item.url,
            type: (item.type === 'image' || item.type === 'video') ? item.type : 'image' as 'image' | 'video',
            highlightId: item.highlightId || ''
          }));

        setHighlights(highlightsData);
        setAllMedia(highlightMediaData);

        setIsModalVisible(false);
      }
    } catch (error) {
      console.error('Failed to save highlight:', error);
    }
  };

  const handleCancel = () => {
    setIsModalVisible(false);
  };

  const handleEdit = (record: HighlightWithMedia) => {
    setEditingRecord(record);

    // Map the media to ensure proper typing
    const mappedMedia = (record.media || []).map((item: MediaApiResponse) => ({
      id: item.id,
      url: item.url,
      type: (item.type === 'image' || item.type === 'video') ? item.type : 'image' as 'image' | 'video',
      highlightId: item.highlightId || record.id
    }));
    setMedia(mappedMedia);

    form.setFieldsValue({
      title: record.title,
      company: record.company,
      description: record.description,
      startDate: dayjs(record.startDate),
    });
    setIsModalVisible(true);
  };

  const handleDelete = async (id: string) => {
    try {
      const response = await fetch(`/api/highlights/${id}`, { method: 'DELETE' });
      if (response.ok) {
        setHighlights(highlights.filter(highlight => highlight.id !== id));
      }
    } catch (error) {
      console.error('Failed to delete highlight:', error);
    }
  };

  const handleMediaUpload = async (file: File, highlightId: string) => {
    const isImage = file.type.startsWith('image/');
    const isVideo = file.type.startsWith('video/');

    if (!isImage && !isVideo) {
      message.error('You can only upload image or video files!');
      return false;
    }

    try {
      // Create form data for upload
      const formData = new FormData();
      formData.append('file', file);
      formData.append('highlightId', highlightId === 'new' ? 'temp' : highlightId);

      // Upload to server
      const response = await fetch('/api/upload/highlights', {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Upload failed');
      }

      const result = await response.json();

      const newMedia: MediaItem = {
        id: '', // Will be set by backend
        url: result.url,
        type: isImage ? 'image' : 'video',
        highlightId: highlightId === 'new' ? '' : highlightId
      };

      // If editing existing highlight, save media immediately
      if (highlightId !== 'new') {
        try {
          const mediaResponse = await fetch('/api/media', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              url: result.url,
              type: isImage ? 'image' : 'video',
              highlightId: highlightId
            })
          });

          if (mediaResponse.ok) {
            const savedMedia = await mediaResponse.json();
            newMedia.id = savedMedia.id;

            // Refresh all media and highlights
            const [allMediaResponse, highlightsResponse] = await Promise.all([
              fetch('/api/media'),
              fetch('/api/highlights')
            ]);
            const allMediaData = await allMediaResponse.json();
            const highlightsData = await highlightsResponse.json();

            const mappedAllMedia = allMediaData
              .filter((item: MediaApiResponse) => item.highlightId)
              .map((item: MediaApiResponse) => ({
                id: item.id,
                url: item.url,
                type: (item.type === 'image' || item.type === 'video') ? item.type : 'image' as 'image' | 'video',
                highlightId: item.highlightId || ''
              }));
            setAllMedia(mappedAllMedia);
            setHighlights(highlightsData);
          }
        } catch (mediaError) {
          console.error('Failed to save media to database:', mediaError);
        }
      }

      setMedia([...media, newMedia]);
      message.success('File uploaded successfully!');

    } catch (error) {
      console.error('Upload error:', error);
      message.error('Failed to upload file');
    }

    return false; // Prevent default upload behavior
  };

  const handleGalleryOpen = (highlightId: string) => {
    setGalleryHighlightId(highlightId);
    const highlightMedia = allMedia.filter(item => item.highlightId === highlightId).map(item => ({
      id: item.id,
      url: item.url,
      type: (item.type === 'image' || item.type === 'video') ? item.type : 'image' as 'image' | 'video',
      highlightId: item.highlightId || ''
    }));
    setMedia(highlightMedia);
    setIsGalleryVisible(true);
  };

  const isBrokenBlobUrl = (url: string) => {
    return url.startsWith('blob:');
  };

  const handleReupload = (item: MediaItem) => {
    message.info('Please upload a new file to replace the broken image');
    // This will trigger the upload dialog for this highlight
    if (item.highlightId) {
      handleGalleryOpen(item.highlightId);
    }
  };

  const handleGallerySelect = (selectedMedia: MediaItem) => {
    // Check if this media is already selected for this highlight
    const isAlreadySelected = media.some(m => m.url === selectedMedia.url);
    if (!isAlreadySelected) {
      setMedia([...media, selectedMedia]);
    }
    setIsGalleryVisible(false);
  };

  const handleMediaRemove = (mediaUrl: string) => {
    setMedia(media.filter(m => m.url !== mediaUrl));
  };

  const columns = [
    { title: 'Title', dataIndex: 'title', key: 'title' },
    { title: "Description", dataIndex: "description", key: "description", render: (text: string) => text || "No description" },
    { title: 'Company', dataIndex: 'company', key: 'company' },
    { title: 'Start Date', dataIndex: 'startDate', key: 'startDate', render: (date: string) => dayjs(date).format('YYYY-MM-DD') },
    {
      title: 'Action',
      key: 'action',
      render: (_: unknown, record: HighlightWithMedia) => (
        <span>
          <Button type="link" onClick={() => handleEdit(record)}>Edit</Button>
          <Button type="link" danger onClick={() => handleDelete(record.id)}>Delete</Button>
        </span>
      ),
    },
  ];

  return (
    <div>
      <div style={{ marginBottom: 16, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
        <Button onClick={handleAdd} type="primary">
          Add Highlight
        </Button>
        
        <div style={{ 
          background: '#f5f5f5', 
          padding: '8px 16px', 
          borderRadius: '8px',
          border: '1px solid #d9d9d9',
          boxShadow: '0 2px 8px rgba(0, 0, 0, 0.06)'
        }}>
          <Space align="center">
            <TableOutlined 
              style={{ 
                color: !isCardView ? '#1890ff' : '#8c8c8c',
                fontSize: '16px',
                transition: 'color 0.3s ease'
              }} 
            />
            <Switch
              checked={isCardView}
              onChange={setIsCardView}
              size="default"
              style={{
                background: isCardView ? '#1890ff' : '#d9d9d9'
              }}
            />
            <AppstoreOutlined 
              style={{ 
                color: isCardView ? '#1890ff' : '#8c8c8c',
                fontSize: '16px',
                transition: 'color 0.3s ease'
              }} 
            />
            <span style={{ 
              marginLeft: 8, 
              color: '#333',
              fontWeight: 500,
              fontSize: '14px',
              transition: 'color 0.3s ease'
            }}>
              {isCardView ? 'Card View' : 'Table View'}
            </span>
          </Space>
        </div>
      </div>
      
      <div 
        className="view-container"
        style={{ 
          position: 'relative',
          minHeight: '400px'
        }}
      >
        <div
          style={{
            position: 'absolute',
            top: 0,
            left: 0,
            right: 0,
            opacity: isCardView ? 1 : 0,
            visibility: isCardView ? 'visible' : 'hidden',
            transform: isCardView ? 'translateY(0px)' : 'translateY(20px)',
            transition: 'all 0.4s cubic-bezier(0.4, 0, 0.2, 1)',
            zIndex: isCardView ? 2 : 1
          }}
        >
          <div 
            style={{ 
              background: 'linear-gradient(135deg, #141414 0%, #1a1a1a 100%)', 
              padding: '32px', 
              borderRadius: '12px', 
              minHeight: '400px',
              border: '1px solid #404040',
              boxShadow: '0 12px 48px rgba(0, 0, 0, 0.5), 0 4px 16px rgba(229, 9, 20, 0.1)',
              backdropFilter: 'blur(8px)'
            }}
          >
            <HighlightCardGrid
              highlights={highlights}
              title=""
              variant="detailed"
              showActions={true}
              gridProps={{ xs: 24, sm: 12, md: 8, lg: 6, xl: 6, xxl: 4 }}
              onCardClick={(highlight) => handleEdit(highlight)}
              onCardEdit={(highlight) => handleEdit(highlight)}
              onCardDelete={(highlight) => handleDelete(highlight.id)}
            />
          </div>
        </div>
        
        <div
          style={{
            position: 'absolute',
            top: 0,
            left: 0,
            right: 0,
            opacity: !isCardView ? 1 : 0,
            visibility: !isCardView ? 'visible' : 'hidden',
            transform: !isCardView ? 'translateY(0px)' : 'translateY(20px)',
            transition: 'all 0.4s cubic-bezier(0.4, 0, 0.2, 1)',
            zIndex: !isCardView ? 2 : 1
          }}
        >
          <Table 
            columns={columns} 
            dataSource={highlights} 
            rowKey="id"
            style={{
              background: '#ffffff',
              borderRadius: '12px',
              overflow: 'hidden',
              boxShadow: '0 4px 24px rgba(0, 0, 0, 0.1)'
            }}
            pagination={{
              showSizeChanger: true,
              showQuickJumper: true,
              showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} highlights`
            }}
          />
        </div>
      </div>
      <Modal
        title={editingRecord ? 'Edit Highlight' : 'Add Highlight'}
        open={isModalVisible}
        onOk={handleOk}
        onCancel={handleCancel}
        width={800}
      >
        <Form form={form} layout="vertical">
          <Form.Item name="title" label="Position Title" rules={[{ required: true }]}>
            <Input />
          </Form.Item>
          <Form.Item name="company" label="Company Name" rules={[{ required: true }]}>
            <Input />
          </Form.Item>
          <Form.Item name="description" label="Description">
            <Input.TextArea rows={3} placeholder="Optional description for this highlight" />
          </Form.Item>
          <Form.Item name="startDate" label="Start Date" rules={[{ required: true }]}>
            <DatePicker />
          </Form.Item>

          {/* Media Upload Section */}
          <Form.Item label="Media">
            <div>
              <Upload
                beforeUpload={(file) => {
                  handleMediaUpload(file, editingRecord?.id || 'new');
                  return false;
                }}
                showUploadList={false}
                accept="image/*,video/*"
              >
                <Button icon={<UploadOutlined />}>Upload Image/Video</Button>
              </Upload>
              <Button
                icon={<PictureOutlined />}
                onClick={() => handleGalleryOpen(editingRecord?.id || 'new')}
                style={{ marginLeft: 8 }}
              >
                Gallery
              </Button>

              {/* Preview of uploaded media */}
              <div style={{ marginTop: 16 }}>
                <Row gutter={[16, 16]}>
                  {media.map(item => (
                    <Col key={item.id} xs={12} sm={8} md={6} lg={4}>
                      <div style={{ position: 'relative', marginBottom: 8 }}>
                        {item.type === 'image' ? (
                          isBrokenBlobUrl(item.url) ? (
                            <div style={{
                              width: '100%',
                              height: 100,
                              backgroundColor: '#ffe6e6',
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'center',
                              borderRadius: 4,
                              flexDirection: 'column',
                              gap: 4
                            }}>
                              <PictureOutlined style={{ fontSize: 24, color: '#ff4d4f' }} />
                              <span style={{ fontSize: 12, color: '#ff4d4f' }}>Broken Image</span>
                              <Button
                                type="primary"
                                size="small"
                                onClick={() => handleReupload(item)}
                              >
                                Re-upload
                              </Button>
                            </div>
                          ) : (
                            <img
                              src={item.url}
                              alt="Highlight media"
                              style={{ width: '100%', height: 100, objectFit: 'cover', borderRadius: 4 }}
                            />
                          )
                        ) : (
                          <div style={{ width: '100%', height: 100, backgroundColor: '#f0f0f0', display: 'flex', alignItems: 'center', justifyContent: 'center', borderRadius: 4 }}>
                            <PlayCircleOutlined style={{ fontSize: 24, color: '#666' }} />
                          </div>
                        )}
                        <Button
                          type="text"
                          danger
                          icon={<CloseOutlined />}
                          size="small"
                          style={{ position: 'absolute', top: 4, right: 4 }}
                          onClick={() => handleMediaRemove(item.url)}
                        />
                      </div>
                    </Col>
                  ))}
                </Row>
              </div>
            </div>
          </Form.Item>
        </Form>
      </Modal>

      {/* Gallery Modal */}
      <Modal
        title="Select from Gallery"
        open={isGalleryVisible}
        onCancel={() => setIsGalleryVisible(false)}
        footer={null}
        width={800}
      >
        <Row gutter={[16, 16]}>
          {allMedia.map((item) => (
            <Col span={8} key={item.id}>
              <div
                onClick={() => handleGallerySelect(item)}
                style={{ cursor: 'pointer', border: '1px solid #d9d9d9', borderRadius: '4px', padding: '8px' }}
              >
                {item.type === 'image' ? (
                  <Image
                    src={item.url}
                    alt="Gallery item"
                    style={{ width: '100%', height: '100px', objectFit: 'cover' }}
                  />
                ) : (
                  <div style={{
                    width: '100%',
                    height: '100px',
                    backgroundColor: '#f0f0f0',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center'
                  }}>
                    <PlayCircleOutlined style={{ fontSize: '24px' }} />
                  </div>
                )}
                <div style={{ marginTop: '8px', textAlign: 'center' }}>
                  {item.type === 'image' ? 'Image' : 'Video'}
                </div>
              </div>
            </Col>
          ))}
        </Row>
      </Modal>
    </div>
  );
};

export default HighlightsPage;
