'use client'

import { Company, Media } from '@prisma/client'
import { useState, useMemo } from 'react'
import { useLanguage, getLocalizedText } from '@/contexts/LanguageContext'
import ProfessionalTimeline, { ExperienceDateRange } from './ProfessionalTimeline'
import { HistoryOutlined } from '@ant-design/icons'

// Extended interface to support multi-period experiences
interface SerializedExperience {
  id: string;
  title: string;
  titleFr: string;
  startDate: string;
  endDate?: string | null;
  description?: string | null;
  descriptionFr?: string | null;
  companyId: string;
  company: Company & { nameFr: string };
  media?: Media[];
  homepageMedia?: Media[];
}

// Enhanced interface for multi-period experiences
interface MultiPeriodExperience {
  id: string;
  title: string;
  titleFr: string;
  description?: string | null;
  descriptionFr?: string | null;
  companyId: string;
  company: Company & { nameFr: string };
  
  // Multi-period support
  dateRanges: ExperienceDateRange[];
  
  // Computed properties for display and sorting
  earliestStartDate: string;
  latestEndDate: string | null;
  isCurrentPosition: boolean;
  totalDurationMonths: number;
  formattedPeriods: string;
  
  // Media and relations
  media?: Media[];
  homepageMedia?: Media[];
  cardMedia?: Media[];
}

interface ExperienceCardProps {
  experience: SerializedExperience | MultiPeriodExperience;
  onClick: () => void;
  variant?: 'compact' | 'detailed' | 'timeline';
  showTimeline?: boolean;
  maxTimelineRanges?: number;
}

// Type guard to check if experience has multi-period structure
const isMultiPeriodExperience = (experience: unknown): experience is MultiPeriodExperience => {
  return (
    typeof experience === "object" &&
    experience !== null &&
    "dateRanges" in experience &&
    Array.isArray((experience as { dateRanges?: unknown[] }).dateRanges)
  );
};

// Convert single-period experience to multi-period format
const convertToMultiPeriod = (experience: SerializedExperience): MultiPeriodExperience => {
  const dateRange: ExperienceDateRange = {
    id: `range-${experience.id}`,
    startDate: experience.startDate,
    endDate: experience.endDate || null,
    isCurrent: !experience.endDate
  };

  return {
    ...experience,
    dateRanges: [dateRange],
    earliestStartDate: experience.startDate,
    latestEndDate: experience.endDate || null,
    isCurrentPosition: !experience.endDate,
    totalDurationMonths: calculateTotalDurationMonths([dateRange]),
    formattedPeriods: formatDateRanges([dateRange]),
    cardMedia: experience.media || []
  };
};

// Utility functions
const calculateTotalDurationMonths = (ranges: ExperienceDateRange[]): number => {
  return ranges.reduce((total, range) => {
    const start = new Date(range.startDate);
    const end = range.endDate ? new Date(range.endDate) : new Date();
    const diffInMonths = Math.floor((end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24 * 30.44));
    return total + diffInMonths;
  }, 0);
};

const formatDateRanges = (ranges: ExperienceDateRange[]): string => {
  const sortedRanges = ranges.sort((a, b) => 
    new Date(a.startDate).getTime() - new Date(b.startDate).getTime()
  );
  
  return sortedRanges.map(range => {
    const startYear = new Date(range.startDate).getFullYear();
    
    if (!range.endDate) {
      return `${startYear}-Present`;
    }
    
    const endYear = new Date(range.endDate).getFullYear();
    return startYear === endYear ? `${startYear}` : `${startYear}-${endYear}`;
  }).join(', ');
};

const calculateTotalExperience = (ranges: ExperienceDateRange[]): number => {
  const totalMonths = calculateTotalDurationMonths(ranges);
  return Math.round(totalMonths / 12 * 10) / 10; // Round to 1 decimal place
};

const ExperienceCard: React.FC<ExperienceCardProps> = ({ 
  experience, 
  onClick, 
  variant = 'detailed',
  showTimeline = true,
  maxTimelineRanges = 5
}) => {
  const { language } = useLanguage()
  const [imageError, setImageError] = useState(false)

  // Convert to multi-period format if needed
  const multiPeriodExp = useMemo(() => {
    return isMultiPeriodExperience(experience) 
      ? experience 
      : convertToMultiPeriod(experience);
  }, [experience]);

  const { title, titleFr, company, dateRanges, homepageMedia = [], isCurrentPosition } = multiPeriodExp;

  const localizedTitle = getLocalizedText(title, titleFr, language)
  const localizedCompanyName = getLocalizedText(company.name, company.nameFr, language)

  const firstImage = homepageMedia?.find((m: Media) => m.type === 'image')
  const shouldShowImage = firstImage && !imageError

  const totalYears = calculateTotalExperience(dateRanges);
  const isMultiPeriod = dateRanges.length > 1;

  // Enhanced hover effect for multi-period experiences
  const cardClasses = [
    "bg-[#303030] rounded-lg overflow-hidden transform hover:scale-105 transition-all duration-300",
    "h-full flex flex-col border border-[#404040] shadow-lg cursor-pointer",
    "hover:shadow-2xl hover:-translate-y-1",
    isMultiPeriod ? "hover:border-[#e50914]/50" : "",
    variant === 'compact' ? "max-w-sm" : variant === 'timeline' ? "max-w-2xl" : ""
  ].filter(Boolean).join(" ");

  return (
    <div className={cardClasses} onClick={onClick}>
      {/* Media Section */}
      <div className="w-full h-48 bg-[#141414] flex items-center justify-center relative">
        {shouldShowImage ? (
          <img
            src={firstImage.url}
            alt={localizedTitle}
            className="w-full h-full object-cover"
            onError={() => setImageError(true)}
          />
        ) : (
          <span className="text-[#808080] text-xl font-bold">{localizedCompanyName.charAt(0)}</span>
        )}
        
        {/* Multi-Period Indicator */}
        {isMultiPeriod && (
          <div className="absolute top-3 right-3 w-8 h-8 bg-[#e50914]/90 rounded-full flex items-center justify-center border border-[#e50914]">
            <HistoryOutlined className="text-white text-sm" />
          </div>
        )}

        {/* Current Position Indicator */}
        {isCurrentPosition && (
          <div className="absolute bottom-3 left-3">
            <div className="flex items-center gap-2 px-2 py-1 bg-green-600/90 rounded-full text-xs text-white">
              <div className="w-2 h-2 bg-white rounded-full animate-pulse" />
              Current
            </div>
          </div>
        )}
      </div>

      {/* Content Section */}
      <div className="p-4 flex flex-col flex-grow">
        {/* Primary Information */}
        <div className="mb-3">
          <h3 className="text-lg font-bold text-white mb-1 leading-tight">{localizedTitle}</h3>
          <p className="text-md font-semibold text-[#e50914]">{localizedCompanyName}</p>
        </div>

        {/* Timeline Section */}
        {showTimeline && dateRanges.length > 0 && (
          <div className="mb-3 flex-grow">
            <ProfessionalTimeline 
              dateRanges={dateRanges}
              format={variant === 'compact' ? 'compact' : 'detailed'}
              maxRanges={maxTimelineRanges}
              showDuration={variant === 'detailed'}
              showCurrentIndicator={variant !== 'compact'}
            />
          </div>
        )}

        {/* Experience Summary */}
        {variant === 'detailed' && totalYears > 0 && (
          <div className="mt-auto pt-3 border-t border-[#404040]/50">
            <div className="text-xs text-[#808080]">
              {isMultiPeriod ? (
                <span>
                  {totalYears} {totalYears === 1 ? 'year' : 'years'} across {dateRanges.length} periods
                </span>
              ) : (
                <span>
                  {totalYears} {totalYears === 1 ? 'year' : 'years'} total
                </span>
              )}
            </div>
          </div>
        )}

        {/* Legacy single date display for compact variant */}
        {!showTimeline && variant === 'compact' && (
          <p className="text-sm text-[#808080] mt-auto">
            {dateRanges[0]?.startDate ? new Date(dateRanges[0].startDate).getFullYear() : ''}
            {dateRanges[0]?.endDate ? ` - ${new Date(dateRanges[0].endDate).getFullYear()}` : ' - Present'}
          </p>
        )}
      </div>
    </div>
  )
}

export default ExperienceCard
export type { MultiPeriodExperience, ExperienceDateRange }
