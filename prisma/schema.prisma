generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String @id @default(cuid())
  email        String @unique
  passwordHash String
}

model Company {
  id          String       @id @default(cuid())
  name        String       @unique
  nameFr      String
  logoUrl     String?
  experiences Experience[]
  highlights  Highlight[]
}

model Experience {
  id              String                @id @default(cuid())
  title           String
  titleFr         String
  startDate       DateTime
  endDate         DateTime?
  description     String
  descriptionFr   String
  companyId       String
  accomplishments Accomplishment[]
  company         Company               @relation(fields: [companyId], references: [id])
  dateRanges      ExperienceDateRange[]
  cardMedia       Media[]               @relation("ExperienceCardMedia")
  homepageMedia   Media[]               @relation("ExperienceHomepageMedia")
  media           Media[]               @relation("ExperienceMedia")
  projects        Project[]
}

model Accomplishment {
  id            String     @id @default(cuid())
  description   String
  descriptionFr String
  experienceId  String
  experience    Experience @relation(fields: [experienceId], references: [id])
}

model ExperienceDateRange {
  id           String     @id @default(cuid())
  startDate    DateTime
  endDate      DateTime?
  experienceId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  experience   Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)

  @@index([experienceId])
  @@index([startDate])
  @@index([endDate])
}

model Knowledge {
  id              String          @id @default(cuid())
  kind            KnowledgeKind
  title           String
  titleFr         String?
  issuer          String?
  issuerFr        String?
  category        String?
  categoryFr      String?
  description     String?
  descriptionFr   String?
  competencyLevel KnowledgeLevel?
  startDate       DateTime?
  endDate         DateTime?
  validUntil      DateTime?
  isCurrent       Boolean         @default(false)
  url             String?
  location        String?
  media           Media[]         @relation("KnowledgeMedia")
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([kind])
  @@index([category])
}

enum KnowledgeKind {
  EDUCATION
  CERTIFICATION
  SKILL
  COURSE
  AWARD
}

enum KnowledgeLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
  MASTER
}

model Project {
  id            String     @id @default(cuid())
  name          String
  nameFr        String
  description   String
  descriptionFr String
  url           String?
  experienceId  String
  experience    Experience @relation(fields: [experienceId], references: [id])
}

model Highlight {
  id            String   @id @default(cuid())
  title         String
  titleFr       String
  companyId     String
  description   String?
  descriptionFr String?
  startDate     DateTime
  createdAt     DateTime @default(now())
  company       Company  @relation(fields: [companyId], references: [id])
  cardMedia     Media[]  @relation("HighlightCardMedia")
  homepageMedia Media[]  @relation("HighlightHomepageMedia")
  media         Media[]  @relation("HighlightMedia")
}

model NavbarConfig {
  id                    String   @id @default(cuid())
  logoText              String   @default("resumeflex")
  logoTextFr            String   @default("resumeflex")
  logoImageUrl          String?
  useImageLogo          Boolean  @default(false)
  workExperienceLabel   String   @default("Work Experience")
  workExperienceLabelFr String   @default("Expérience de travail")
  careerSeriesLabel     String   @default("Career Series")
  careerSeriesLabelFr   String   @default("Série de carrière")
  knowledgeLabel        String   @default("Knowledge")
  knowledgeLabelFr      String   @default("Connaissances")
  backgroundColor       String   @default("#141414")
  backgroundType        String   @default("color")
  backgroundImageUrl    String?
  gradientFrom          String   @default("#141414")
  gradientTo            String   @default("#1a1a1a")
  fontFamily            String   @default("Inter")
  logoFontFamily        String   @default("Inter")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model FooterConfig {
  id              String   @id @default(cuid())
  logoText        String   @default("resumeflex")
  logoTextFr      String   @default("resumeflex")
  logoImageUrl    String?
  useImageLogo    Boolean  @default(false)
  copyrightText   String   @default("© 2025 resumeflex. All rights reserved.")
  copyrightTextFr String   @default("© 2025 resumeflex. Tous droits réservés.")
  linkedinUrl     String?
  showLinkedin    Boolean  @default(true)
  backgroundColor String   @default("#0a0a0a")
  textColor       String   @default("#ffffff")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Media {
  id                   String         @id @default(cuid())
  url                  String
  type                 String
  experienceId         String?
  experienceHomepageId String?
  experienceCardId     String?
  knowledgeId          String?
  highlightId          String?
  highlightHomepageId  String?
  highlightCardId      String?
  createdAt            DateTime       @default(now())
  highlightCard        Highlight?     @relation("HighlightCardMedia", fields: [highlightCardId], references: [id])
  highlightHomepage    Highlight?     @relation("HighlightHomepageMedia", fields: [highlightHomepageId], references: [id])
  highlight            Highlight?     @relation("HighlightMedia", fields: [highlightId], references: [id])
  knowledge            Knowledge?     @relation("KnowledgeMedia", fields: [knowledgeId], references: [id])
  experienceCard       Experience?    @relation("ExperienceCardMedia", fields: [experienceCardId], references: [id])
  experienceHomepage   Experience?    @relation("ExperienceHomepageMedia", fields: [experienceHomepageId], references: [id])
  experience           Experience?    @relation("ExperienceMedia", fields: [experienceId], references: [id])
}

model SEOConfig {
  id                   String   @id @default(cuid())
  siteName             String   @default("resumeflex")
  siteNameFr           String   @default("resumeflex")
  defaultTitle         String   @default("Professional Portfolio - resumeflex")
  defaultTitleFr       String   @default("Portfolio Professionnel - resumeflex")
  defaultDescription   String   @default("Professional portfolio showcasing experience, skills, and achievements.")
  defaultDescriptionFr String   @default("Portfolio professionnel présentant l'expérience, les compétences et les réalisations.")
  defaultKeywords      String   @default("portfolio, professional, experience, skills, career")
  defaultKeywordsFr    String   @default("portfolio, professionnel, expérience, compétences, carrière")
  canonicalUrl         String   @default("https://resumeflex.com")
  robotsContent        String   @default("User-agent: *\nAllow: /\nDisallow: /boss/\nSitemap: https://resumeflex.com/sitemap.xml")
  faviconUrl           String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model SEOMetaTag {
  id                             String   @id @default(cuid())
  page                           String   @unique
  title                          String
  titleFr                        String
  description                    String
  descriptionFr                  String
  keywords                       String?
  keywordsFr                     String?
  ogTitle                        String?
  ogTitleFr                      String?
  ogDescription                  String?
  ogDescriptionFr                String?
  ogImage                        String?
  canonicalUrl                   String?
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt
  articleAuthor                  String?
  articleModifiedTime            String?
  articlePublishedTime           String?
  articleSection                 String?
  articleTag                     String?
  ogImageAlt                     String?
  ogImageHeight                  String?
  ogImageWidth                   String?
  ogLocale                       String?
  ogSiteName                     String?
  ogType                         String?
  ogUpdatedTime                  String?
  ogUrl                          String?
  profileFirstName               String?
  profileGender                  String?
  profileLastName                String?
  profileUsername                String?
  twitterAppIdGoogleplay         String?
  twitterAppIdIphone             String?
  twitterAppNameGoogleplay       String?
  twitterAppNameIphone           String?
  twitterAppUrlGoogleplay        String?
  twitterAppUrlIphone            String?
  twitterCard                    String?
  twitterCreator                 String?
  twitterDescription             String?
  twitterDescriptionFr           String?
  twitterImage                   String?
  twitterImageAlt                String?
  twitterPlayer                  String?
  twitterPlayerHeight            String?
  twitterPlayerStream            String?
  twitterPlayerStreamContentType String?
  twitterPlayerWidth             String?
  twitterSite                    String?
  twitterTitle                   String?
  twitterTitleFr                 String?

  @@index([page])
}

model StructuredData {
  id        String   @id @default(cuid())
  type      String
  page      String
  jsonData  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type])
  @@index([page])
  @@index([isActive])
}
